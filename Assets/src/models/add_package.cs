//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/src/models/add_package.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Add_package: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Add_package()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""add_package"",
    ""maps"": [
        {
            ""name"": ""package"",
            ""id"": ""432aa7eb-49f2-4189-b98b-398521f8f0e1"",
            ""actions"": [
                {
                    ""name"": ""add"",
                    ""type"": ""Button"",
                    ""id"": ""fc9c9b9d-b994-47ff-82a7-4c7927201bd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e8b47f3-f9db-4821-8974-dec54e988fee"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""add"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // package
        m_package = asset.FindActionMap("package", throwIfNotFound: true);
        m_package_add = m_package.FindAction("add", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // package
    private readonly InputActionMap m_package;
    private List<IPackageActions> m_PackageActionsCallbackInterfaces = new List<IPackageActions>();
    private readonly InputAction m_package_add;
    public struct PackageActions
    {
        private @Add_package m_Wrapper;
        public PackageActions(@Add_package wrapper) { m_Wrapper = wrapper; }
        public InputAction @add => m_Wrapper.m_package_add;
        public InputActionMap Get() { return m_Wrapper.m_package; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PackageActions set) { return set.Get(); }
        public void AddCallbacks(IPackageActions instance)
        {
            if (instance == null || m_Wrapper.m_PackageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PackageActionsCallbackInterfaces.Add(instance);
            @add.started += instance.OnAdd;
            @add.performed += instance.OnAdd;
            @add.canceled += instance.OnAdd;
        }

        private void UnregisterCallbacks(IPackageActions instance)
        {
            @add.started -= instance.OnAdd;
            @add.performed -= instance.OnAdd;
            @add.canceled -= instance.OnAdd;
        }

        public void RemoveCallbacks(IPackageActions instance)
        {
            if (m_Wrapper.m_PackageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPackageActions instance)
        {
            foreach (var item in m_Wrapper.m_PackageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PackageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PackageActions @package => new PackageActions(this);
    public interface IPackageActions
    {
        void OnAdd(InputAction.CallbackContext context);
    }
}
